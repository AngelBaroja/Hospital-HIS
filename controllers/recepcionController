const Recepcion = require('../models/Recepcion');
const Paciente = require('../models/Paciente');
const Turno = require('../models/Turno');
const Mutual_Paciente = require('../models/Mutual_Paciente');
const Mutual = require('../models/Mutual');
const Motivo = require('../models/Motivo');
const Cama = require('../models/Cama');
const Habitacion = require('../models/Habitacion');
const Ala = require('../models/Ala');

const { Op, EagerLoadingError } = require('sequelize');

async function inicioRecepcion(req, res) {
    try{
    const usuario= req.session.nombreUsuario;
    res.status(200).render('recepcion/recepcion',{usuario})
    }catch (error) {
        console.error('Error en inicioRecepcion:', error);
        res.status(500).render('error', { 
            mensaje: 'Error al cargar la página de recepción',
            error
        });
    }
}

async function buscarTurno(req, res) {
    try {
    const { dni,'tipo-paciente': tipo } = req.body;   
    const usuario = req.session.nombreUsuario;
    

    // Buscar todas las mutuales
    const mutuales = await Mutual.findAll();
    
    // Buscar todos los motivos
    const motivos = await Motivo.findAll();
    
    let mutualPacientes = null; // Inicializar variable para evitar errores si no se encuentra el paciente
    let nombreMutual = null; // Inicializar variable para el nombre de la mutual
    let paciente=null;   
    
   
        // Buscar paciente por DNI
        paciente = await Paciente.findOne({ where: { dni: dni } });

        if (paciente) {
             const recepcionActiva = await Recepcion.findOne({
            where: {
                id_paciente: paciente.id,
                fecha_salida: null
            }});
            if (recepcionActiva) {
                return res.status(404).render('recepcion/recepcion', {  // Renderizar una vista de error si el paciente se encuentra internado
                    error: `El Paciente ${paciente.nombre} ${paciente.apellido} ya se encuentra internado detro del hospital`,
                    usuario,
                    dni,
                    tipo                   
                });
            }
        }

         //Si existe buscamos su mutual si es que tiene
        if (paciente) {
            mutualPacientes = await Mutual_Paciente.findOne({
                where: {id_paciente: paciente.id},
                include: [Mutual]            
            });
                if (mutualPacientes) {
                    nombreMutual = mutualPacientes.Mutual.nombre; 
                }                  
        }          
    
      // Si es cita programada, buscar turno
        if (tipo === 'Cita Programada') { 
            // Si no se encuentra el paciente
            if (!paciente) {
                return res.status(404).render('recepcion/recepcion', {  // Renderizar una vista de error si no se encuentra el paciente
                    error: `El Paciente debe estar registrado para tener Cita Programada.`,
                    usuario,
                    dni,
                    tipo                   
                });
            }
            // Buscar turno del paciente para el día de hoy y que la hora sea mayor a la hora actual
            const today = new Date();
            const horaActual = today.getHours();

            const turno = await Turno.findOne({
                where: {
                    id_paciente: paciente.id,
                    fecha_turno: today,                    
                },
                 order: [
                    ['hora', 'DESC'] // Ordena por hora en orden descendente (la más reciente primero)
                ]
            }); 
            // Si no encontramos el turno
            if (!turno) {
                return res.status(404).render('recepcion/recepcion', {
                    dni,
                    tipo,
                    usuario,
                    error: `Paciente ${paciente.nombre} ${paciente.apellido} no tiene turno programado para hoy`,                    
                });
            }else if( turno.hora < horaActual){
                return res.status(404).render('recepcion/recepcion', {
                    dni,
                    tipo,
                    usuario,
                    error: `El paciente ${paciente.nombre} ${paciente.apellido} llego tarde para su cita hoy`,                    
                });
            }  
            // Si encontramos el turno
            return res.status(200).render('recepcion/registro', {
                dni,
                tipo,
                usuario,
                paciente,
                mutuales,
                mutualPacientes,
                nombreMutual,
                motivos               
            });
        }

         //Verificamos que sea por Emergencia
        if (dni === "") {              
                // Generamos un paciente simulado para indicar que es por Emergencia 
                paciente= await Paciente.build();              
                    
        }else if (dni.length !== 8 ) {  //Verificamos que ingrese un dni correcto
            return res.status(404).render('recepcion/recepcion', {
            error: 'El DNI debe tener 8 dígitos.',
            usuario,
            dni,
            tipo
            });
        }
        
        if (dni === "" && tipo == "Derivacion") {
            return res.status(404).render('recepcion/recepcion', {
            error: 'Los Pacientes con Derivacion deben registrar su DNI',
            usuario,
            dni,
            tipo
            });
        }

      
        // Si no es cita programada
        return res.status(200).render('recepcion/registro', {
            dni,
            tipo,
            usuario,
            paciente,
            mutuales,
            mutualPacientes,
            nombreMutual,
            motivos,                       
        });

     } catch (error) {
        console.error('Error en buscarTurno:', error);
        return res.status(500).render('recepcion/recepcion', {
            mensaje: 'Error al buscar el turno del paciente en recepción',
            error            
                      
        });
    }
}

async function atrasRegistro(req, res) { 
    try{   
    const {  dni, tipo, paciente } = req.body;
    const usuario = req.session.nombreUsuario;

    res.render('recepcion/recepcion', { 
        usuario,
        dni,
        tipo,
        paciente       
    });
    } catch (error) {
        console.error('Error en atrasRegistro:', error);
        res.status(500).render('error', {
            mensaje: 'Error al volver atrás en el registro',
            error
        });
    }

}

async function crearPaciente(req, res) {
    try {
    // Extraer todos los campos del formulario de registro
    const {
        dni,
        tipo, 
        nombre,
        apellido,
        fecha_nacimiento, 
        genero,    
        contacto_emergencia,
        direccion,
        provincia,
        localidad,
        seguro,
        codigo_mutual,
        tipo_cobertura,
        activa,
        motivo,
        detalle_motivo
    } = req.body;
    
    let paciente = req.body.paciente;
    const usuario = req.session.nombreUsuario;

    // Obtener el id del Motivo para la Recepcion
    const idMotivo = await Motivo.findOne({
        where: { tipos: motivo }
    });  

    const recepciones = await Recepcion.findAll({
            where: { fecha_salida: null },
            include: [
                { model: Paciente, attributes: ['id', 'genero'] },
                { 
                    model: Cama, 
                    attributes: ['id', 'id_habitacion'],
                    include: [{ model: Habitacion, attributes: ['id'] }]
                }
            ]
         });

    if (paciente) {
        // Convertir string JSON a objeto
        paciente = JSON.parse(paciente);
    }
    
    
    if (paciente.dni == "Sin DNI") {         
        console.log("El paciente ingreso por Emergencia");        
        
        // Obtener habitaciones disponibles para emergencia
        const habitacionesDisponibles = await Habitacion.findAll({
                where: { activa: true },
                include: [{
                model: Cama,  
                include: [{
                    model: Recepcion,
                    where: { fecha_salida: null },
                    required: false,  
                    include: [{
                        model: Paciente,
                        attributes: ['id', 'genero']
                    }]
                }]
            },
            {
                model: Ala 
            }]
            });
        
        return res.status(200).render('recepcion/asignacion', {            
            tipo,
            usuario,
            paciente,
            idMotivo,
            detalle_motivo,
            habitaciones: habitacionesDisponibles,
            recepciones 
        });
    }

    //Transformo la variable activa a boolean para comparar en la BD
    const activaBoolean = activa === "Activa" ? true : false;

    // Compara los campos relevantes de paciente (ignorando id, createdAt, updatedAt)
    const pacienteExistente = await Paciente.findOne({ where: { dni } });

    if (pacienteExistente && pacienteExistente.nombre === nombre &&
        pacienteExistente.apellido === apellido && 
        String(pacienteExistente.fecha_nacimiento) === String(fecha_nacimiento) &&
        pacienteExistente.genero === genero &&  
        pacienteExistente.direccion === direccion &&
        pacienteExistente.contacto_emergencia === contacto_emergencia &&
        pacienteExistente.provincia === provincia &&
        pacienteExistente.localidad === localidad) 
    {
        console.log('El paciente ya existe en la base de datos');  
    } else {
        console.log('El paciente no existe, se creará uno nuevo o se actualizará el existente');
        // Buscar el paciente haber si existe 
        const pacienteExistente = await Paciente.findOne({ where: { dni } });
        if (pacienteExistente) {
            // Actualizar los campos del paciente
            await pacienteExistente.update({
                nombre,
                apellido,
                fecha_nacimiento,
                genero,
                direccion,
                contacto_emergencia,
                provincia,
                localidad
            });
            console.log('Paciente actualizado correctamente');
        } else {
            // Crear un nuevo paciente si no existe
            await Paciente.create({
                nombre,
                apellido,
                dni,
                fecha_nacimiento,
                genero,
                direccion,
                contacto_emergencia,
                provincia,
                localidad
            });
            console.log('Nuevo paciente creado');
        }
    };

    // Buscamos la mutual por su nombre
    const mutualExistente = await Mutual.findOne({ where: { nombre: seguro } });

    const Elpaciente = await Paciente.findOne({ where: { dni } });
    
    // Buscamos que mutual tiene el paciente
    const pacienteMutual = await Mutual_Paciente.findOne({
        where: { id_paciente: Elpaciente.id }
    });

    // Verificar si ya existe una mutual para el paciente 
    if (pacienteMutual) {
        if (pacienteMutual.id_mutual != mutualExistente?.id ||
            pacienteMutual.codigo_mutual != codigo_mutual ||
            pacienteMutual.tipo_cobertura != tipo_cobertura ||
            pacienteMutual.activa != activaBoolean) {
                await pacienteMutual.update({
                    id_mutual: mutualExistente?.id,
                    codigo_mutual,
                    tipo_cobertura,
                    activa: activaBoolean
                });
                console.log('Mutual del paciente actualizada correctamente');
        } else {
            console.log("El Paciente no modifico su Mutual");                
        } 
    } else {
        // Si no se cargaron datos de la mutual, no se crea una mutual al paciente
        // Si se cargaron datos de la mutual y no existe una Mutual_Paciente, se crea una al paciente
        if (codigo_mutual && tipo_cobertura && seguro) {        
            await Mutual_Paciente.create({
                id_paciente: Elpaciente.id,
                id_mutual: mutualExistente?.id,
                codigo_mutual,
                tipo_cobertura,
                activa: activaBoolean
            });
            console.log('Nueva mutual creada para el paciente');
        } else {
            console.log('Este paciente no tiene mutual, no se crea una nueva');
        }
    }
    
        paciente = Elpaciente;
    
      // Obtener habitaciones disponibles con sus camas libres
        const habitacionesDisponibles = await Habitacion.findAll({
        where: { activa: true },
        include: [{
            model: Cama,  // <-- Elimina el where: { estado: 'Libre' }
            include: [{
                model: Recepcion,
                where: { fecha_salida: null },
                required: false,  // <-- Importante para incluir camas sin recepción
                include: [{
                    model: Paciente,
                    attributes: ['id', 'genero']
                }]
            }]
        },
            {
                model: Ala 
            }]
        });

        // Renderizar la vista de asignación
        res.status(200).render('recepcion/asignacion', {         
            tipo,
            usuario,
            habitaciones: habitacionesDisponibles, 
            paciente, 
            pacienteMutual,
            idMotivo,
            detalle_motivo,
            recepciones       
        });
    } catch (error) {
        console.error('Error en crearPaciente:', error);
        res.status(500).render('error', {
            mensaje: 'Error al crear/actualizar paciente',
            error
        });
    }
}

async function ingresarHabitacion(req, res) {
try {

  console.log('Ingresando a la habitacion');
 
    const { tipo, idMotivo, detalle_motivo, idCama } = req.body;
    const usuario = req.session.nombreUsuario;
    let paciente = JSON.parse(req.body.paciente);
    
    //Generamos al paciente si viene por emergencia
    if (paciente.id==null) {
        paciente= await Paciente.create();
    } 
    //Busco la cama 
    const cama = await Cama.findOne({
            where: { 
                id: idCama,               
            }
         });

    
    
    //Cambio el estado de la cama a Ocupada
    await cama.update({ estado: 'Ocupada' });

        // Creo la recepción
        const recepcion = await Recepcion.create({
            id_paciente: paciente.id,
            id_cama: idCama,
            id_motivo: idMotivo,
            detalle_motivo,
            tipo,
            fecha_entrada: new Date(),
            hora: new Date().getHours()
        });
        console.log(`Recepcion ${recepcion.id} creada, Paciente: ${paciente.nombre}, cama nº ${cama.numero}, habitacion nº ${cama.id_habitacion}`);
        

       res.status(200).render('home',{usuario});
    } catch (error) {
        console.error('Error en ingresarHabitacion:', error);
        res.status(500).render('error', {
            mensaje: 'Error al ingresar paciente a la habitacion',
            error
        });
    }
}

async function vistaPacientesConRecepcion(req, res) { 
try {
    const usuario = req.session.nombreUsuario;
    // Traigo las recepciones activas y sus pacientes, camas y habitaciones
    const recepciones = await Recepcion.findAll({
        where: { fecha_salida: null },
        include: [
        { model: Paciente },
        { 
            model: Cama,
            include: [
            { model: Habitacion }
            ]
        }
        ]
    });
    res.status(200).render('recepcion/lista', { usuario, recepciones });
  } catch (error) {
        console.error('Error en vistaPacientesConRecepcion:', error);
        res.status(500).render('error', {
            mensaje: 'Error al cargar la lista de pacientes',
            error
        });
    }
}

async function retirarRecepcion(req, res) {
  try {
    const { id } = req.params; 

    // Actualiza la recepción
    await Recepcion.update(
      {
        fecha_salida: new Date(),
        estado: "Retirado",        
      },
      { where: { id } }
    );
    const recepcion= await Recepcion.findOne({
        where:{id}
    })
    console.log(`Recepcion nº ${recepcion.id} cambiada a ${recepcion.estado}` );
    
    
    //Busco la cama 
    const cama = await Cama.findOne({
            where: { 
                id: recepcion.id_cama,               
            }
         });
    //Cambio el estado de la cama a Ocupada
    await cama.update({ estado: 'Libre' });
    
    
    res.redirect('/recepcion/lista');
  } catch (error) {
        console.error('Error al retirar recepción:', error);
        res.status(500).render('error', {
            mensaje: 'Error al actualizar la retirada del paciente en recepcion',
            error
        });
    }
}

module.exports = {  
 inicioRecepcion,
 buscarTurno,  
 crearPaciente,
 ingresarHabitacion,
 atrasRegistro,
 vistaPacientesConRecepcion,
 retirarRecepcion
};